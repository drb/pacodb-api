<?php

class PacoProxy
{
	const EXECUTE_PERMISSION 	= 'WebMethod';  	// method tag to look for to enable api expose
	
	private $class, $method, $namespace, $error;
	private $object, $request;
	private $start, $end, $version;
	
	/**
	 * Constructs the incoming data
	 */
	public function __construct($request=null)
	{
		$this->start = microtime(true);
		
		// merge the incoming data		
		$defaultRequest = $_GET + $_POST;
		$requestArray = $defaultRequest;
		
		if(!is_null($request))
		{
			$request = trim($request);
			$request = str_replace(array("\n","\t"),'', $request);
			parse_str($request, $requestArray);
		
			$requestArray = $requestArray + $defaultRequest;			
		}
		
		foreach($requestArray as &$element)
		{						
			if(!is_array($element))
			{
				$element = trim($element);
			}
		}
		
		// sort the array so we get some consistency for API hashes.
		// i.e foo=bar&bar=foo, bar=foo&foo=bar actually are the same signature
		ksort($requestArray);
		//
		$this->request = $requestArray;
	}
	
	/**
	 * Tests incoming method request
	 */
	public function is_method($method)
	{
		if (preg_match("/^([a-zA-Z]+)\.([a-zA-Z]+)$/", $method))
		{
			// extract the class and method
			list($this->class, $this->method) = explode('.', $method);
			
			//
			return true;
		}
		return false;
	}
	
	/**
	 * Executes an API request from external sources
	 */
	public function execute()
	{
		
		$method 	= $this->method;
		$derived_class 	= $this->namespace . ucwords($this->class);
		$params		= $this->request;
			
		// ensure the class exists
		if (class_exists($derived_class))
		{
			$rc = new ReflectionClass($derived_class);			

			if ($rc->hasMethod($method))
			{
				$args = array();
				$m = $rc->getMethod($method);
				
				// get the permissions for this api method - we're looking for WebMethod. No rule applied, no execution
				$m_meta = $m->getDocComment();
				
				// test if accessible
				if (!strpos($m_meta, self::EXECUTE_PERMISSION))
				{
					throw new Exception('This method is not executable');
				} 
				// permission to execute this method are set
				else 
				{											
					// get the method's params
					$p = $m->getParameters();
					
					// loop them
					foreach($p as $param)
					{
						// if user has not supplied all required arguments we flag it
						if(!$param->isOptional() && !isset($params[$param->getName()]))
						{
							throw new Exception("Missing required parameter " . $param->getName() . " for method $class.$method");
						} 
						else 
						{
							if (isset($params[$param->getName()]))
							{
								// args are sent in order, so create an argument array here to send to the method
								$args[] = $params[$param->getName()];
							} else 
							{
								$args[] = $param->getDefaultValue();
							}
						}
					}
					//print_r($this->request);
					$api = new $derived_class;
					
					$auth = $api->auth(
						$this->request['api_key'], 
						$this->request['api_hash'],
						$this->request['method']
					);
					
					//print($auth);
					
					$response = $m->invokeArgs($api, $args);
					return $response;
				}
			} 
			else 
			{
				throw new Exception("No such method $method in " . strtolower(str_replace(self::NSPACE, '', $class)));
			}
		}

	}
	
	
	/**
	 * Outputs data in structured format
	 */
	public function output($response, $callback='', $format=false)
	{
		$data 	= array();
		$status = 'ok';
		
		$params = $this->request;
		if (!is_array($response) && get_class($response) == 'PacoError')
		{
			$status = 'error';
			$data	= array('error'=>$response->get());
		} 
		else 
		{
			$data = $response;
		}
		
		foreach(array_keys($params) as $p)			
		{
			if (in_array($p, array('sort', 'filter')))
			{
				$rule = array();
				switch ($p)
				{
				case 'sort':
					$rule = PacoUtils::sort_rules($params[$p]);
					break;
				case 'filter':
					$rule = PacoUtils::filter_rules($params[$p]);
					break;
				}
				$params[$p] = $rule;
			}
		}
		
		// output bucket
		$output = array
		(			
			'response' => array
			(
				'status'=>$status,
				'execution_time'=>$this->get_execution_time(),
				'endpoint'=>$this->version,
				'params'=>$params
			)
		);
		
		// keys to remove from the dataset
		$exclude 	= array('_id');
		
		// merge the trees 			
		$output = array_merge($output, $data);
		
		// encode arrays into json
		$json = json_encode($output);
		
		// if formatting specified, apply it
		if ($format)
		{
			$json = PacoUtils::json_format($json);
		}
		
		// if json-p is required, append here
		if (!empty($callback))
		{		
			// check callback - only allow alphanumerics
			$callback = preg_replace("/([^a-zA-Z0-9\_])/", "", $callback);
			
			// append callback into json return data
			$json = "$callback($json)"; 
		}
		
		// print straight out as json data
		header("Content-type: application/json;");
		
		// and out...
		print($json);
	}
	
	private function get_execution_time()
	{
		$this->end = microtime(true);
		return round($this->end - $this->start, 6);
	}
	
	public function results()
	{
		if ($this->error)
		{
			print('er');
		}
		if (!$this->results)
		{
			return false;
		}
		return $this->results;
	}
	
	public function set_namespace($namespace)
	{
		$this->namespace = $namespace;
	}
}

